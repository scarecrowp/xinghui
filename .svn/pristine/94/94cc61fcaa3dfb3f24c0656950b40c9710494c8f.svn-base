//
//  JLCommonUtil.m
//  EvenTouch
//
//  Created by Jack Liu on 14-6-17.
//  Copyright (c) 2014年 Jack Liu. All rights reserved.
//

#import "JLCommonUtil.h"
#import <unistd.h>
#import "Reachability.h"
#import "BDKNotifyHUD.h"
#import "KeychainItemWrapper.h"
//#import "SSKeychain.h"

@implementation JLCommonUtil

/*
 检查当前网络状态
 */
+ (BOOL)currentNetworkStatus
{
    Reachability *r = [Reachability reachabilityForInternetConnection];
    
    if ([r currentReachabilityStatus] == NotReachable)
    {
//        UIWindow *window = [[[UIApplication sharedApplication]windows]objectAtIndex:0];
        UIWindow *window = [[UIApplication sharedApplication]keyWindow];
        
        BDKNotifyHUD *notify = [BDKNotifyHUD notifyHUDWithImage:nil text:@"当前无网络连接!"];
        notify.center = CGPointMake(window.center.x, window.center.y - 20);

        [window addSubview:notify];

        [notify presentWithDuration:1.0f speed:0.5f inView:window completion:^{
            [notify removeFromSuperview];
        }];
        
        return NO;
    }
    else
    {
        return YES;
    }
}

/*
 保存用户信息
 */
+ (void)saveUserInfo:(NSDictionary *)userInfo
{
    [[NSUserDefaults standardUserDefaults]setObject:userInfo forKey:@"userInfo"];
}

/*
 获取用户信息
 */
+ (NSDictionary *)getUserInfo
{
    if ([[NSUserDefaults standardUserDefaults]objectForKey:@"userInfo"])
    {
        return [[NSUserDefaults standardUserDefaults]objectForKey:@"userInfo"];
    }
    
    return nil;
}

/*
 获取用户id
 */
+ (NSString *)getUserId
{
    //如果没有登陆的情况下返回uuid做为用户id
    if (![JLCommonUtil isLogin])
    {
        return [JLCommonUtil getUUID];
    }
    
    if ([[NSUserDefaults standardUserDefaults]objectForKey:@"userInfo"])
    {
        return [[[NSUserDefaults standardUserDefaults]objectForKey:@"userInfo"]objectForKey:@"uid"];
    }
    
    return nil;
}

/*
 获取auto_token
 */
+ (NSString *)getAutoToken
{
    if ([[NSUserDefaults standardUserDefaults]objectForKey:@"userInfo"])
    {
        return [[[NSUserDefaults standardUserDefaults]objectForKey:@"userInfo"]objectForKey:@"auto_token"];
    }
    return nil;
}

/*
 判断是否为登录状态
 */
+ (BOOL)isLogin
{
    if([[NSUserDefaults standardUserDefaults]boolForKey:@"loginStatus"])
    {
        return [[NSUserDefaults standardUserDefaults]boolForKey:@"loginStatus"];
    }
    else
    {
        return NO;
    }
}

/*
 设置登录状态
 */
+ (void)setLoginStatus:(BOOL)status
{
    [[NSUserDefaults standardUserDefaults]setBool:status forKey:@"loginStatus"];
    [[NSUserDefaults standardUserDefaults] synchronize];
}

/*
 根据Stirng获取高度
 */
+ (CGFloat)getHightWithString:(NSString *)str fontOfSize:(CGFloat)fontSize maxWidth:(CGFloat)maxWidth
{
    
    CGSize constraint = CGSizeMake(maxWidth, 20000.0f);
    
    //CGSize size = [str sizeWithFont:[UIFont systemFontOfSize:fontSize] constrainedToSize:constraint lineBreakMode:NSLineBreakByWordWrapping];
    CGSize size = [str boundingRectWithSize:constraint options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:fontSize]} context:nil].size;
    
    return size.height;
}

/**
 *  获取应用的uuid并保存在钥匙串中
 */
+ (NSString *)getUUID
{
    KeychainItemWrapper *keychainItem = [[KeychainItemWrapper alloc]
                                         initWithIdentifier:[[NSBundle mainBundle] bundleIdentifier] accessGroup:nil];
    
    NSString *strUUID = [keychainItem objectForKey:CFBridgingRelease(kSecAttrAccount)];
    
    if ([strUUID isEqualToString:@""])
    {
        CFUUIDRef uuidRef = CFUUIDCreate(kCFAllocatorDefault);
        strUUID = (NSString *)CFBridgingRelease(CFUUIDCreateString (kCFAllocatorDefault,uuidRef));

        [keychainItem setObject:strUUID forKey:CFBridgingRelease(kSecAttrAccount)];
    }

    NSLog(@"uuid == %@",strUUID);

    return strUUID;
}

+ (void)saveMobileAds:(NSArray *)adsArray
{
    [[NSUserDefaults standardUserDefaults]setObject:adsArray forKey:@"ads_images"];
}

+ (NSArray *)getMobleAdsArray
{
    NSArray *arry = [[NSUserDefaults standardUserDefaults]objectForKey:@"ads_images"];
    return [[NSArray alloc]initWithArray:arry];
}
#pragma mark-
#pragma mark- 正则判断手机号码地址格式
+(BOOL)isMobileNumber:(NSString *)mobileNum
{
    /**
     * 手机号码
     * 移动：134[0-8],135,136,137,138,139,150,151,157,158,159,182,187,188
     * 联通：130,131,132,152,155,156,185,186
     * 电信：133,1349,153,180,189
     */
    NSString * MOBILE = @"^1(3[0-9]|5[0-35-9]|8[025-9])\\d{8}$";
    /**
     10         * 中国移动：China Mobile
     11         * 134[0-8],135,136,137,138,139,150,151,157,158,159,182,187,188
     12         */
    NSString * CM = @"^1(34[0-8]|(3[5-9]|5[017-9]|8[0-9])\\d)\\d{7}$";
    /**
     15         * 中国联通：China Unicom
     16         * 130,131,132,152,155,156,185,186
     17         */
    NSString * CU = @"^1(3[0-2]|5[256]|8[0-9]|7[0-9])\\d{8}$";
    /**
     20         * 中国电信：China Telecom
     21         * 133,1349,153,180,189
     22         */
    NSString * CT = @"^1((33|53|8[09])[0-9]|349)\\d{7}$";
    /**
     25         * 大陆地区固话及小灵通
     26         * 区号：010,020,021,022,023,024,025,027,028,029
     27         * 号码：七位或八位
     28         */
    // NSString * PHS = @"^0(10|2[0-5789]|\\d{3})\\d{7,8}$";
    
    NSPredicate *regextestmobile = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", MOBILE];
    NSPredicate *regextestcm = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CM];
    NSPredicate *regextestcu = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CU];
    NSPredicate *regextestct = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CT];
    
    if (([regextestmobile evaluateWithObject:mobileNum] == YES)
        || ([regextestcm evaluateWithObject:mobileNum] == YES)
        || ([regextestct evaluateWithObject:mobileNum] == YES)
        || ([regextestcu evaluateWithObject:mobileNum] == YES))
    {
        return YES;
    }
    else
    {
        return NO;
    }
}

@end
